{
  // Discover all options at: http://www.jshint.com/docs/options/

  /*
   * ENFORCING OPTIONS
   * =================
   */

  // Force all variable names to use either camelCase style or UPPER_CASE
  // with underscores.
  "camelcase": true,

  // Require {} for every new block or scope
  "curly": true,

  // Prohibit use of == and != in favor of === and !==.
  "eqeqeq": true,

  // Prohibit overwriting prototypes of native Objects such as Array, Date, etc
  "freeze": true,

  // Require immediate invocations to be wrapped in parens
  // e.g. `(function () { } ());`
  "immed": false, // we're using (function () {})();

  // Enforce tab width of 2 spaces.
  "indent": 2,

  // Prohibit use of a variable before it is defined.
  "latedef": true,

  // Require capitalized names for constructor functions.
  "newcap": true,

   // Prohibit use of `++` & `--`
  "plusplus": false,

  // Enforce use of single quotation marks for strings.
  "quotmark": "single",

  // Enforce placing 'use strict' at the top function scope
  "strict": true,

  // Prohibit use of explicitly undeclared variables.
  "undef": true,

  // Warn when variables are defined but never used.
  "unused": true,

  /*
   * RELAXING OPTIONS
   * =================
   */

  // Tolerate Automatic Semicolon Insertion (no semicolons)
  "asi": false,

  // Suppress warnings about == null comparisons.
  "eqnull": true,

  // Tolerate comma-first style coding
  "laxcomma": false,

  // Tolerate functions being defined in loops
  "loopfunc": false,

  // Tolerate multi-line strings
  "multistr": false,

  // Tolerate mixed tabs/spaces when used for alignment
  "smarttabs": false,

  // Tolerate using `[]` notation when it can still be expressed in dot notation
  "sub": false,

  // Tolerate `new function () { ... };` and `new Object;`
  "supernew": false,

  /*
   * ENVIRONMENTS
   * =================
   */

  // Define globals exposed by modern browsers.
  "browser": true,

  // Define globals exposed by jQuery.
  "jquery": true,

  // Define globals exposed by Node.js.
  "node": true
}
